import model_jax
import kernels_jax
import mertics_jax
import jax

from jax import numpy as jnp
from jax import jit, vmap

key = jax.random.PRNGKey(0)

if __name__ == '__main__':
    # x = jnp.array([[3, 3], [4, 3], [1, 1]])
    # y = jnp.array([1, 1, -1])
    data_len = 20
    x = 2 * (jnp.linspace(0, 10, data_len)) + 2 + jax.random.uniform(key, (data_len,), 'float32', -0.1, 0.1)
    x.at[10:].set(x[10:] + 3)
    # x.at[:].set(x[:])
    # for i in range(100):
    #     x.at[i].set(x[i]+jax.random.uniform())
    y = jnp.concatenate([jnp.ones(data_len//2), -jnp.ones(data_len//2)])
    kernel = kernels.KERNELS['linear']
    c = 1
    tol = 1e-3
    max_passes = 10

    alpha = jax.random.uniform(key, (data_len,), minval=-1, maxval=1)
    b = model.calculate_b(alpha, x, y, kernel, c)
    print(f'b:{b}')

    svm_predict = jit(vmap(
        model.svm_predict, in_axes=(0, None, None, None, None, None)),
        static_argnames=['kernel'])
    res = svm_predict(x, kernel, x, y, alpha, b)
    # print(f'res:{res}')

    acc = mertics.accuracy(y, res)
    print(f'acc:{acc}')

    # smo = jit(model.smo, static_argnames=['kernel', 'c', 'tol', 'max_passes'])

    trained_alpha, trained_b = model.smo(x, y, kernel, c, tol, max_passes)
    trained_res = svm_predict(x, kernel, x, y, trained_alpha, trained_b)
    trained_acc = mertics.accuracy(y, trained_res)
    print(f'trained_acc:{trained_acc}')
